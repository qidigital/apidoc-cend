openapi: 3.0.3
info:
  title: Cend.app
  description: |-
    This is a Cend.app API. These  API's can  be used to  register, validate and login users. There are alos API's available  for wallet creation, fetching and deletion.


    

  termsOfService: http://swagger.io/terms/
  contact:
    email: dev@qidigital.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

servers:
  - url: https://testapi.zapup.io/api/
tags:
  - name: HealthCheck
  - name: Onboarding
  - name: Login
  - name: Wallet
  - name: Payment request
  - name: Customer
  - name: Gateway
paths:
  /healthcheck:
    get:
      tags:
       - HealthCheck
      summary: Check the health of API
      description: Check the health of API
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
                
  /onboarding:
    post:
      tags:
        - Onboarding
      summary: To register a  new  user
      description: To  register new  user.
      requestBody:
        description: Register a new  user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '200':
          description: Successful Registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerResponse'
      
  /onboarding/verify:
    post:
      tags:
        - Onboarding
      summary: To verify registered user email id
      description: To verify registered user email id
      requestBody:
        description: Register a new  user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify'
      responses:
        '200':
          description: Successful Registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyResponse'
      
  /auth:
    post:
      tags:
        - Login
      summary: User login
      description: User login
      requestBody:
        description: login user email id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Successful Registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponse'
  /profile/address:
    post:
      security:
        - BearerAuth: []
      tags:
        - Profile
      summary: Update Merchant Profile
      requestBody:
        description: Update merchant profile information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/address'
      responses:
        '200':
          description: Successful Updation of address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address'
    get:
      security:
        - BearerAuth: []
      tags:
        - Profile
      summary: Get Merchant Profile
      responses:
        '200':
          description: Successful Updation of address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/address'
  /profile/password:
    post:
      security:
        - BearerAuth: []
      tags:
        - Profile
      summary: Update Merchant Password
      requestBody:
        description: Update merchant profile password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/password'
      responses:
        '200':
          description: Successful updation
          content:
              application/json:
                example:
                  message: Password updated successfully!
  /wallet:
    post:
      security:
        - BearerAuth: []
      tags:
        - Wallet
      summary: Create Wallet operations
      description: Wallet operations
      requestBody:
        description: create a wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wallet'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/walletResponse'
    get:
      security:
        - BearerAuth: []
      tags:
        - Wallet
      summary: To fetch all wallets
      description: To fetch all wallets
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagination'
                
  /wallet/{walletId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Wallet
      summary: To fetch wallet with Id
      description: To fetch wallet with Id
      parameters:
        - name: walletId
          in: path
          description: Wallet Id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/walletResponse'
    delete:
      security:
        - BearerAuth: []
      tags: 
        - Wallet
      summary: delete wallet with id
      description: Delete wallet with id
      parameters:
        - name: walletId
          in: path
          description: Wallet Id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/walletResponse'
      
  /payment_request:
    post:
      security:
        - BearerAuth: []
      tags:
        - Payment request
      summary: Create transaction
      description: Create transaction
      requestBody:
        description: create a wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionResponse' #payment_token is added in response temporrily for testing
    get:
      security:
        - BearerAuth: []
      tags:
        - Payment request
      summary: Get all transaction
      description: Get all transaction
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactionPagination'
  /payment_request/{paymentRequestId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Payment request
      summary: Get transaction with id
      description: Get transaction with id
      parameters:
        - name: paymentRequestId
          in: path
          description: transaction Id
          required: true
          schema:
            type: string
            example: 2ab84535-82bf-4435-8911-90759c2e49c1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentResponse' 
  /customer:
    post:
      security:
        - BearerAuth: []
      tags:
        - Customer
      summary: Create customer
      description: Create customer
      requestBody:
        description: create a wallet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse'
    get:
      security:
        - BearerAuth: []
      tags:
        - Customer
      summary: Get all transaction
      description: Get all transaction
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerPagination'
  /customer/{customerId}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Customer
      summary: Get customer with customer id
      description: Get transaction with id
      parameters:
        - name: customerId
          in: path
          description:  customerId
          required: true
          schema:
            type: string
            example: 15
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customerResponse' 
  /gateway/payment_request/get:
    get:
      security:
        - BearerAuth: []
      tags:
        - Gateway
      summary: Get payment request  details with url token
      description: Get payment request  details with url token
      parameters:
        - name: payment_token
          in: query
          description: payment_token
          required: True
          schema:
            type: string
            example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vemFwdXAuaW8iLCJhdWQiOiJodHRwOi8vemFwdXAuaW8iLCJpYXQiOjE2OTU3NjMxMjUsImV4cCI6MTY5NjYyNzEyNSwiZGF0YSI6eyJfaWQiOjE2LCJpZCI6ImEwN2M3YjA0LWUwMDMtNGQxNi1hOTZiLTFiYjllNDljM2NlYSIsInR5cGUiOiJwYXltZW50X3JlcXVlc3QiLCJtZXJjaGFudF9pZCI6NDYzfX0._X1TEFmAfuIylzSb_3tU6lXLJSfcj3QCEJprU-2mxkM"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewayResponse'
  /gateway/payment_request/process:
    post:
      security:
        - BearerAuth: []
      tags:
        - Gateway
      summary: Process payment request 
      description: Process payment request details with url token
      requestBody:
        description: url token and block hash recieved meta mask or web socket.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/gatewayRequest'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gatewayProceesResponse'
components:
  schemas:
    Health:
      type: object
      properties:
        status:
          type: string
          example: ok
    Register:
      type: object
      properties:
        account_type:
          type: string
          example: company
          enum:
           - individual
           - company
        company_name:
          type: string
          example: Qi-Digital
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@gmail.com
        password:
          type: string
          example: johndoe1234
    registerResponse:
      type: object
      properties:
        id:
          type: string
          example: 2399ae7c-c504-4281-8312-c260af9696e3
        message:
          type: string
          example: User created successfully
    Verify:
      type: object
      properties:
        id:
          type: string
          example: 2399ae7c-c504-4281-8312-c260af9696e3
        otp:
          type: integer
          example: 1234
    verifyResponse:
      type: object
      properties:
        id:
          type: string
          example: 2399ae7c-c504-4281-8312-c260af9696e3
        message:
          type: string
          example: Merchant verified successfully
    Login:
      type: object
      properties:
        email:
          type: string
          example: john.doe@gmail.com
        password:
          type: string
          example: johndoe1234
    loginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2OTUxOTQ2MjYsIm5iZiI6MTY5NTE5MzYyNiwiZGF0YSI6eyJpZCI6MjIsImVtYWlsIjoiQmVzc2llLkhhcnJpczE3QHlhaG9vLmNvbSJ9fQ.d5zMZ1r9VV4Dgl8vshUzIZ4zaiRUULZ1amt5j66Hwi0
        message:
          type: string
          example: Authentication successful
        merchant:
          type: object
          properties:
            id:
              type: string
              example: 22
            type:
              type: string
              example: company
            first_name:
              type: string
              example: John
            last_name:
              type: string
              example: Doe
            email:
              type: string
              format: email
              example: john.doe@gmail.com
            company:
              type: string
              example: Qi-Digital
            status:
              type: string
              example: active
            created_at:
              type: string
              format: date-time
              example: 2023-09-20T07:07:01.000000Z
            updated_at:
              type: string
              format: date-time
              example: 2023-09-20T07:07:01.000000Z
    wallet:
      type: object
      properties:
        crypto:
          type: string
          example: btc
          enum:
            - btc
            - eth
        address:
          type: string
          example: xyz
        name:
          type: string
          example: John
    walletResponse:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: John
        crypto:
          type: string
          example: btc
          enum:
            - btc
            - eth
        status:
          type: string
          example: pending
          enum:
           - pending
           - active
        address:
          type: string
          example: xyz
        updated_at:
          type: string
          format: date-time
          example: 2023-09-21T19:22:23.000000Z
        created_at:
          type: string
          format: date-time
          example: 2023-09-21T19:22:23.000000Z
    pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: array
          items: 
            $ref: '#/components/schemas/walletResponse'
        first_page_url:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet?page=1
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 1
        last_page_url:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet?page=1
        links:
          type: array
          items:
            $ref: '#/components/schemas/links'
        next_page_url:
          type: string
          example: null
        path:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet
        per_page:
          type: integer
          example: 15
        prev_page_url:
          type: string
          example: null
        to:
          type: integer
          example: 2
        total:
          type: integer
          example: 2
    links:
      type: object
      properties:
        url:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet?page=1
        label:
          type: string
          example: "&laquo; Previous"
        active:
          type: boolean
          example: false
    transaction:
      type: object
      properties:
        wallet_id:
          type: integer
          example: 409
        crypto_amount:
          type: integer
          example: 200
        customer:
          type: object
          properties:
            name:
              type: string
              example: John Doe
            email:
              type: string
              format: email
              example: john.doe@gmail.com
    transactionResponse:
      type: object
      properties:
        status:
          type: string
          example: created
        crypto_amount:
          type: integer
          example: 200
        id:
          type: string
          example: 46b6be63-375e-4a0b-b803-f52bf24e13fc
        updated_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
        created_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
    transactionPagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: array
          items: 
            $ref: '#/components/schemas/transactionResponse'
        first_page_url:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet?page=1
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 1
        last_page_url:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet?page=1
        links:
          type: array
          items:
            $ref: '#/components/schemas/links'
        next_page_url:
          type: string
          example: null
        path:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet
        per_page:
          type: integer
          example: 15
        prev_page_url:
          type: string
          example: null
        to:
          type: integer
          example: 2
        total:
          type: integer
          example: 2
    customer:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@gmail.com
    customerResponse:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        id:
          type: string
          example: 7
        email:
          type: string
          example: john.doe@gmail.com
        updated_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
        created_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
    customerPagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: array
          items: 
            $ref: '#/components/schemas/customerResponse'
        first_page_url:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet?page=1
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 1
        last_page_url:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet?page=1
        links:
          type: array
          items:
            $ref: '#/components/schemas/links'
        next_page_url:
          type: string
          example: null
        path:
          type: string
          format: url
          example: https://testapi.zapup.io/api/wallet
        per_page:
          type: integer
          example: 15
        prev_page_url:
          type: string
          example: null
        to:
          type: integer
          example: 2
        total:
          type: integer
          example: 2
    paymentResponse:
      type: object
      properties:
        id:
          type: string
          example: 2ab84535-82bf-4435-8911-90759c2e49c1
        crypto_amount:
          type: integer
          example: 200
        status:
          type: string
          example: created
        updated_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
        created_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
        customer:
          $ref: '#/components/schemas/customerResponse'
        wallet:
          $ref: '#/components/schemas/walletResponse'
    gatewayResponse:
      type: object
      properties:
        id:
          type: string
          example: a07c7b04-e003-4d16-a96b-1bb9e49c3cea
        crypto_amount:
          type: integer
          example: 200
        status:
          type: string
          example: created
        updated_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
        created_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
        customer:
          $ref: '#/components/schemas/customerResponse'
    gatewayRequest:
      type: object
      properties:
        payment_token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vemFwdXAuaW8iLCJhdWQiOiJodHRwOi8vemFwdXAuaW8iLCJpYXQiOjE2OTU3NjMxMjUsImV4cCI6MTY5NjYyNzEyNSwiZGF0YSI6eyJfaWQiOjE2LCJpZCI6ImEwN2M3YjA0LWUwMDMtNGQxNi1hOTZiLTFiYjllNDljM2NlYSIsInR5cGUiOiJwYXltZW50X3JlcXVlc3QiLCJtZXJjaGFudF9pZCI6NDYzfX0._X1TEFmAfuIylzSb_3tU6lXLJSfcj3QCEJprU-2mxkM"
        block_hash:
          type: string
          example: "xyz"
    gatewayProceesResponse:
      type: object
      properties:
        status:
          type: string
          example: created
        block_hash:
          type: string
          example: xyz
        updated_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
        created_at:
          type: string
          format: date-time
          example: 2023-09-23T18:22:38.000000Z
    address:
      type: object
      properties:
        address:
          type: string
        street:
          type: string
        city:
          type: string
        postcode:
          type: string
        country:
          type: string
    password:
      type: object
      properties:
        password:
          type: string
  securitySchemes:
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
